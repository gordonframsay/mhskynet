
    <div style="padding: 0px 30px">
        <h2>Mandelbrot</h2>
    </div>

<div style="padding: 0px 30px">
  <form>
   <p><a href="/mandelbrot?center_x=-0.8&center_y=0&zoom=1&max_iter=200&antialias=1">Zoom Out/Reset</a></p>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#myModal">
  Help/Hints
</button>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel">The Mandelbrot</h4>
      </div>
      <div class="modal-body">

<p>The Mandelbrot set is a fractal, meaning that it uses relatively simple math/algorithm to produce a picture with infinite detail.  Clicking on 
the image will center the X/Y coordinates there.  Centering on a black edge and zooming in 100x times or so usually produces the most interesting 
results.  Upping the Max Iterations will remove more black (reducing the uncertainty).  It isn't a bad idea to keep it under 500.  Upping the 
antialiasing will smooth the image but increase the rendering time dramatically.  Antialiasing at more than 3 generally doesn't increase quality 
significantly.  After adjusting settings, click the Draw button to refresh.  Some browsers might complain of stalled scripts, but click wait/continue to 
keep the rendering going.</p>

<p><center><img src="/mandelbrot.jpg" /></center></p>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

   <table>
    <tr>
     <td style="padding: 10px 15px">
      X: <input name="x" id="x" value="<%= @x %>" class="form-control input-sm" />
      Y: <input name="y" id="y" value="<%= @y %>" class="form-control input-sm" />
     </td>
     <td style="padding: 0 15px">
      Zoom: <input name="zoom" id="zoom" value="<%= @zoom %>" class="form-control input-sm" />
     </td>
     <td style="padding: 0 15px">
      Max Iterations: <input name="max_iter" id="max_iter" value="<%= @max_iter %>" class="form-control input-sm" />
     </td>
     <td style="padding: 0 15px">
      Antialias: <input name="antialias" id="antialias" value="<%= @antialias %>" class="form-control input-sm" />
     </td>
     <td style="padding: 0 15px">
      Render: <input type="button" onclick="draw_m();" value="Draw" class="form-control input-sm btn-primary" />
     </td>
     <td style="padding: 0 15px">
      Render Time: <input name="render_time" id="render_time" readonly="readonly" class="form-control input-sm" />
     </td>
     <td style="padding: 0 15px">
      <div id="spinner" style="display: none"><img src="/basic_spinner.gif" /></div>
     </td>
    </tr>
   </table>
  </form>
</div>

<div>
    <canvas></canvas>
</div>

  <script>

 var canvas = document.querySelector('canvas');
 var elemLeft = canvas.offsetLeft;
 var elemTop = canvas.offsetTop;
 var center_x = parseFloat(document.getElementById("x").value);
 var center_y = parseFloat(document.getElementById("y").value);
 var zoom = parseFloat(document.getElementById("zoom").value);
 var width = window.innerWidth;
 var height = window.innerHeight;

 function m_set_dist(cx, cy, max_iter) {
   var xorbit = new Array(max_iter + 1);
   var yorbit = new Array(max_iter + 1);
   var dist = 0.0;
   var temp = 0.0;
   var x = 0.0;
   xorbit[0] = 0.0; 
   yorbit[0] = 0.0; 
   var huge = 1000.0;
   var yder = 0.0;
   var xder = 0.0;
   var x2 = 0.0;
   var y2 = 0.0;
   var y = 0.0;
   var x = 0.0;
   var iter = 1;
   var overflow =  1.0e100;
   while ((iter < max_iter) && ((x2+y2) < huge)) {
    temp = x2 - y2 + cx;
    y = 2.0 * x * y + cy;
    x = temp;
    x2 = x*x;
    y2 = y*y;
    xorbit[iter] = x;
    yorbit[iter] = y;
    iter += 1;
   }
   var flag = false;
   if ( (x2+y2) > huge ) {
    var i = 0;
    while ( ( i < iter ) && (! flag) ) {
     temp = 2.0 * (xorbit[i] * xder - yorbit[i] * yder + 1.0);
     yder = 2.0 * (yorbit[i] * xder + xorbit[i] * yder);
     xder = temp;
     flag = Math.max(Math.abs(xder),Math.abs(yder)) > overflow;
     i += 1;
    }
    if (! flag) {
     dist = Math.log(x2+y2)*Math.sqrt(x2+y2)/Math.sqrt(xder*xder+yder*yder);
    }
   }
  return dist;
 }

/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  l       The lightness
 * @return  Array           The RGB representation
 *
 *  Via: http://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion
 *
 */
function hslToRgb(h, s, l){
    var r, g, b;

    if(s == 0){
        r = g = b = l; // achromatic
    }else{
        var hue2rgb = function hue2rgb(p, q, t){
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}

  function draw_m() {
   document.getElementById("spinner").style.display = "block"; /* This doesn't really work... maybe try to use requestAnimationFrame? */
   var time_start = new Date().getTime();
   var ctx = canvas.getContext('2d');
   zoom = parseFloat(document.getElementById("zoom").value);
   center_x = parseFloat(document.getElementById("x").value);
   center_y = parseFloat(document.getElementById("y").value);
   antialias = parseInt(document.getElementById("antialias").value);
   width = window.innerWidth;
   height = window.innerHeight;
   var max_iter = parseInt(document.getElementById("max_iter").value);
   canvas.width = width;
   canvas.height = height;
   for (var x = 0; x < width; x++) {
    for (var y = 0; y < height; y++) {
     var dist = 0.0
     for (var x_antialias = 1; x_antialias <= antialias; x_antialias++) {
      for (var y_antialias = 1; y_antialias <= antialias; y_antialias++) {
       dist += m_set_dist((((((x + (x_antialias / (antialias + 1)) - 0.5) / width) * 3) - 1.5) / zoom) + center_x, (((((y + (y_antialias / (antialias + 1)) - 0.5) / height) * 2) - 1) / zoom) + center_y, max_iter)
      }
     }
     dist = dist / (antialias * antialias);
     rgb_color = hslToRgb((dist * 300 * zoom) % 1, 0.5, 0.5)
     var red_color = rgb_color[0];
     var green_color = rgb_color[1];
     var blue_color = rgb_color[2];
     if (dist > 0) {
      ctx.fillStyle = 'rgb('+red_color+','+green_color+','+blue_color+')';
     } else {
      ctx.fillStyle = 'rgb(0,0,0)';
     }
     ctx.fillRect(x, y, 1.0, 1.0);
    }
   }
   var time_end = new Date().getTime();
   var time = time_end - time_start;
   document.getElementById("render_time").value = time+"ms";
   document.getElementById("spinner").style.display = "none";
   var stateObj = { center_x: center_x, center_y: center_y, zoom: zoom, max_iter: max_iter, antialias: antialias };
   window.history.pushState(stateObj, "Mandelbrot", "/mandelbrot?center_x="+center_x+"&center_y="+center_y+"&zoom="+zoom+"&max_iter="+max_iter+"&antialias="+antialias);
  }

 canvas.addEventListener('click', function(event) {
    var x = event.pageX - elemLeft,
        y = event.pageY - elemTop;

    m_width = ((1.5 / zoom) + center_x) - ((- 1.5 / zoom) + center_x);
    m_height = ((1.0 / zoom) + center_y) - ((- 1.0 / zoom) + center_y);
    left_edge = center_x - (m_width / 2.0);
    right_edge = (m_width / 2.0) + center_x;
    top_edge = center_y - (m_height / 2.0);
    bottom_edge = (m_height / 2.0) + center_y;
    document.getElementById("x").value = ((x / width) * m_width) + left_edge;
    document.getElementById("y").value = ((y / height) * m_height) + top_edge;

 }, false);

$(document).ready(function() {
 draw_m();  
});

  </script>
